## 性质
1. 每个节点都是红色或黑色
2. 根节点是黑色的
3. 叶节点（nullLeaf）都是黑色的
4. 如果节点为红色，则其子节点均为黑色
5. 对于每个节点，从节点到后代叶子的所有路径都包含相同数量的黑色节点

```
                        |                  
                (38)<- [55] -> (80)----------------     
                /   \____        |___________      |
        [17]<-(25)->[33] \                   |    (88)
                         (46)->[50]  [72]<-(76)
    
```
### 平衡
- 这五条性质导致 红黑树 等价于 4阶B树 -> 非常的矮
- 红黑树的平衡标准比较宽松：没有一条路劲会大于其他路径的2倍
- 是一种弱平衡，黑高度平衡
- 最大高度 2*log2(n+1)  
n : 节点个数（100W个节点，红黑树最大高度40）

### 时间复杂度
- 搜索 ：O(logn)
- 添加 ：O(logn)上溢, O(1) 次旋转操作   最多 3 次
- 删除 ：O(logn)下溢, O(1) 次旋转操作   最多 3 次

据统计 递归调用 导致旋转一直循环旋转 次数是 O(1) 次 最多旋转3次
### AVL 树
- 平衡标准比较严格：每个左右子树的高度不超过1
- 最大高度 1.44*log2(n+2)-1.328  
n : 节点个数（100W个节点，AVL树最大高度28）
- 搜索 ：O(logn)
- 添加：O(logn)，O(1) 次旋转操作
- 删除 ：O(logn)，O(logn)次旋转操作

### 总结
- 搜索的次数远远大于插入和删除 选择AVL树
- 搜索、插入、删除的次数几乎差不多 选择红黑树

- 相对于AVL树来说，红黑树牺牲了部分平衡性能来唤起插入/删除操作时少量的旋转操作，整体来说性能要优于AVL树
- 红黑树的平均统计性能优于AVL树，实际应用中更多选择使用红黑树
