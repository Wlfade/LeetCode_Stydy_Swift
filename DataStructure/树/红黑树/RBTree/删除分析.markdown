### 红黑树等价于4阶B树 所以一下用B树的样式 分析
#### 我们用 `[x]`表示红色节点，用`(x)`表示黑色节点，`p` = 父节点，`gp` = 祖父节点，`u` = 叔节点

- 删除分析
> 已知B树中新元素必定是添加到叶子节点中，4阶B树中所有节点的元素个数X都符合 1<= X <= 3 ,新建一个节点默认为RED
**案例1：** 
```
                        |                  
                (38)<- [55] -> (80)----------------     
                /   \____        |___________      |
        [17]<-(25)->[33] \                   |    (88)
                         (46)->[50]  [72]<-(76)
    
```
- 情况1.删除的是 红色 节点[17] [33] [50] [72] 直接删除，不做任何处理

- 情况2. 删除的是黑色 节点 有三种情况
    - 有2个红色子节点  <-(25)->  不能被直接删除（根据二叉树性质 度为2的节点删除会找到它的后继节点(度为1) 或 前驱节点(度为1)代替删除 ）它的叶子节点被代替删除因此不用考虑这个情况
    
    - 有1个红色子节点 (46)->  <-(76)  将替代的叶子节点染黑 即可保证红黑树的性质 [50]  和  [72]
    
    - black 的叶子节点 (88) 发生下溢的情况 这个时候需要向兄弟节点 求救
    - 1.sibling (兄弟节点) 为红色 将 sibling 染成 黑色 ,parent 染成 red ,parent 进行旋转 
        - 旋转方向 被删除的节点在左边 兄弟节点在右边 则 父节点左旋转 然后跟换兄弟节点 就是 现在父节点的 右子节点 （原来兄弟节点的左子节点 (黑色)）->正的旋转变换 
        - 旋转方向 被删除的节点在右边 兄弟节点在左边 则 父节点右旋转 然后跟换兄弟节点 就是 现在父节点的 左子节点 （原来兄弟节点的右子节点 (黑色)）->正的旋转变换
        - 如果parent 是 黑色 会导致 parent 也下溢 ，这时候只需要把parent 当成被删除节点处理即可
        - 继续往下走 判断 现在的兄弟节点 是否 有叶子节点 进行 一下 的操作（但是现在的parent 是红色 所以parent不会下溢 改变颜色即可）
    - 2.1.sibling (兄弟节点) 黑色 没有子节点 将 sibling 染成 red ,parent 染成 black ,就可修复红黑树性质
        - 如果parent 是 黑色 会导致 parent 也下溢 ，这时候只需要把parent 当成被删除节点处理即可
    - 2.2.sibling (兄弟节点) 为黑色 有叶子节点 查看 兄弟节点的子节点和这个子节点的grand的关系 是 LL RR  LR  RL  
            LL: grand 右旋转 这里的grand 是相对于 兄弟节点的子节点来说的 对于删除的节点来说 其实是被删除节点的 parent 
            RR: grand 左旋转 这里的grand 是相对于 兄弟节点的子节点来说的 对于删除的节点来说 其实是被删除节点的 parent 
            LR:  parent(被删除节点的 兄弟节点) 左旋转 grand (被删除节点的 父节点) 右旋转
            RL: parent(被删除节点的 兄弟节点)  右旋转 grand (被删除节点的 父节点)  左旋转

